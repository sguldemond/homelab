pipeline {
    agent {
        kubernetes {
            defaultContainer 'docker'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins/agent: docker-dind
spec:
  serviceAccountName: jenkins
  containers:
  - name: docker
    image: docker:27-cli
    command: ['sh','-lc','sleep 9999999']
    env:
      - name: DOCKER_HOST
        value: tcp://localhost:2375
      - name: DOCKER_BUILDKIT
        value: "1"
    volumeMounts:
      - name: docker-graph
        mountPath: /var/lib/docker
      - name: docker-config
        mountPath: /home/jenkins/.docker
  - name: dind
    image: docker:27-dind
    securityContext:
      privileged: true
    env:
      - name: DOCKER_TLS_CERTDIR
        value: ""
    args:
      - --host=tcp://0.0.0.0:2375
      - --storage-driver=overlay2
    volumeMounts:
      - name: docker-graph
        mountPath: /var/lib/docker
  volumes:
    - name: docker-graph
      emptyDir: {}
    - name: docker-config
      emptyDir: {}
"""
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        IMAGE_NAME   = 'sguldemond/my-portal'
        INFRA_REPO   = 'sguldemond/homelab'
        KUS_PATH     = 'projects/portal/manifests/base'
        DOCKER_BUILDKIT = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                container('docker') {
                    checkout scm
                    sh 'git config --global --add safe.directory /home/jenkins/agent/'
                    script {
                        env.GIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    }
                    println "GIT_SHA: ${env.GIT_SHA}"
                }
            }
        }

        stage('Build & Push (docker-workflow)') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-token') {
                            def img = docker.build("${IMAGE_NAME}:${GIT_SHA}")
                            img.push()
                            img.push('latest')
                        }
                    }
                }
            }
        }

        stage('Install kustomize & patch image') {
            steps {
                container('docker') {
                    sh """
                    set -euo pipefail
                    curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
                    sudo mv kustomize /usr/local/bin/
                    cd "${KUS_PATH}"
                    kustomize edit set image "${IMAGE_NAME}=${IMAGE_NAME}:${GIT_SHA}"
                    """
                }
            }
        }

        // stage('Commit & Push infra change') {
        //     steps {
        //         container('docker') {
        //             withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'sguldemond', passwordVariable: 'GITHUB_TOKEN')]) {
        //                 sh """
        //                 set -e
        //                 git config user.name "jenkins-ci"
        //                 git config user.email "jenkins-ci@users.noreply.github.com"
        //                 git add ${KUS_PATH}/kustomization.yaml || true
        //                 if git diff --staged --quiet; then
        //                     echo "No changes to commit"
        //                 else
        //                     git commit -m "portal: bump image to ${GIT_SHA}"
        //                     # If this is not a multibranch job, push to main explicitly:
        //                     git push https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${INFRA_REPO}.git HEAD:main
        //                 fi
        //                 """
        //             }
        //         }
        //     }
        // }
    }

    post {
        success {
            echo "✅ docker-workflow (DinD) build OK: ${IMAGE_NAME}:${GIT_SHA}"
        }
        failure {
            echo '❌ Pipeline failed'
        }
    }
}
